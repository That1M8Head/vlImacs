This is corfu.info, produced by makeinfo version 6.7 from corfu.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Corfu: (corfu).       Completion Overlay Region FUnction.
END-INFO-DIR-ENTRY


File: corfu.info,  Node: Top,  Next: Introduction,  Up: (dir)

corfu.el - Completion Overlay Region FUnction
*********************************************

* Menu:

* Introduction::
* Features::
* Installation and Configuration::
* Key bindings::
* Complementary packages::
* Caveats::
* Contributions::

— The Detailed Node Listing —

Installation and Configuration

* TAB-and-Go completion::



File: corfu.info,  Node: Introduction,  Next: Features,  Prev: Top,  Up: Top

1 Introduction
**************

Corfu enhances the default completion in region function with a
completion overlay.  The current candidates are shown in a popup below
or above the point.  Corfu is the minimalistic ‘completion-in-region’
counterpart of the Vertico (https://github.com/minad/vertico) minibuffer
UI.

   Corfu is a minimal package, which relies on the Emacs completion
facilities and concentrates on providing a polished completion UI.
Completions are either provided by commands like ‘dabbrev-completion’ or
by pluggable backends (‘completion-at-point-functions’, Capfs).  Most
programming language major modes implement a Capf.  Furthermore the
language server packages, Eglot (https://github.com/joaotavora/eglot)
and Lsp-mode (https://github.com/emacs-lsp/lsp-mode), both use Capfs
which talk to the LSP server to retrieve the completions.

   Corfu does not include custom completion backends.  In contrast, the
complex Company package includes custom completion backends, which
deviate from the Emacs completion infrastructure.  The Emacs built-in
Capfs are mostly sufficient, but a few additional Capfs and completion
functions are provided by the Cape (https://github.com/minad/cape)
package.

   *NOTE*: Corfu uses child frames to show the popup; on non-graphical
displays it will fall back to the default setting of the
‘completion-in-region-function’.

   <https://github.com/minad/corfu/blob/screenshots/light.png?raw=true>

   <https://github.com/minad/corfu/blob/screenshots/dark.png?raw=true>


File: corfu.info,  Node: Features,  Next: Installation and Configuration,  Prev: Introduction,  Up: Top

2 Features
**********

   • Timer-based auto-completions (_off_ by default, set ‘corfu-auto’).
   • Popup display with scrollbar indicator and arrow key navigation.
   • The popup can be summoned explicitly by pressing ‘TAB’ at any time.
   • The current candidate is inserted with ‘TAB’ and selected with
     ‘RET’.
   • Candidates sorting by prefix, string length and alphabetically.
   • The selected candidate is previewed (configuable via
     ‘corfu-preview-current’).
   • The selected candidate automatically committed on further input by
     default (configurable via ‘corfu-commit-predicate’).
   • The Orderless (https://github.com/oantolin/orderless) completion
     style is supported.  The filter string can contain arbitrary
     characters, including spaces, if ‘corfu-quit-at-boundary’ is nil.
   • Deferred completion style highlighting for performance.
   • Jumping to location/documentation of current candidate.
   • Show candidate documentation/signature string in the echo area.
   • Deprecated candidates are crossed out in the display.
   • Support for annotations (‘annotation-function’,
     ‘affixation-function’).
   • Icons can be provided by an external package via margin formatter
     functions.


File: corfu.info,  Node: Installation and Configuration,  Next: Key bindings,  Prev: Features,  Up: Top

3 Installation and Configuration
********************************

Corfu is available from GNU ELPA
(http://elpa.gnu.org/packages/corfu.html), such that it can be installed
directly via ‘package-install’.  After installation, the global minor
mode can be enabled with ‘M-x corfu-global-mode’.  In order to configure
Corfu and other packages in your init.el, you may want to use
‘use-package’.

   Corfu is highly flexible and customizable via ‘corfu-*’ customization
variables.  For filtering I recommend to give Orderless completion a
try, which is different from the familiar prefix TAB completion.  Corfu
can be used with the default completion styles, the use of Orderless is
not a necessity.  See also the Corfu Wiki
(https://github.com/minad/corfu/wiki) for additional configuration tips.
In particular the Lsp-mode configuration is documented in the Wiki.

   Here is an example configuration:

     (use-package corfu
       ;; Optional customizations
       ;; :custom
       ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
       ;; (corfu-auto t)                 ;; Enable auto completion
       ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
       ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
       ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
       ;; (corfu-preview-current nil)    ;; Disable current candidate preview
       ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
       ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
       ;; (corfu-scroll-margin 5)        ;; Use scroll margin

       ;; You may want to enable Corfu only for certain modes.
       ;; :hook ((prog-mode . corfu-mode)
       ;;        (shell-mode . corfu-mode)
       ;;        (eshell-mode . corfu-mode))

       ;; Recommended: Enable Corfu globally.
       ;; This is recommended since dabbrev can be used globally (M-/).
       :init
       (corfu-global-mode))

     ;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
     ;; in the Consult wiki for an advanced Orderless style dispatcher.
     ;; Enable `partial-completion' for files to allow path expansion.
     ;; You may prefer to use `initials' instead of `partial-completion'.
     (use-package orderless
       :init
       ;; Configure a custom style dispatcher (see the Consult wiki)
       ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
       ;;       orderless-component-separator #'orderless-escapable-split-on-space)
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles . (partial-completion))))))

     ;; Use dabbrev with Corfu!
     (use-package dabbrev
       ;; Swap M-/ and C-M-/
       :bind (("M-/" . dabbrev-completion)
              ("C-M-/" . dabbrev-expand)))

     ;; A few more useful configurations...
     (use-package emacs
       :init
       ;; TAB cycle if there are only few candidates
       (setq completion-cycle-threshold 3)

       ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
       ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
       ;; (setq read-extended-command-predicate
       ;;       #'command-completion-default-include-p)

       ;; Enable indentation+completion using the TAB key.
       ;; `completion-at-point' is often bound to M-TAB.
       (setq tab-always-indent 'complete))

* Menu:

* TAB-and-Go completion::


File: corfu.info,  Node: TAB-and-Go completion,  Up: Installation and Configuration

3.1 TAB-and-Go completion
=========================

You may be interested in configuring Corfu in TAB-and-Go style.
Pressing TAB moves to the next candidate and further input will then
commit the selection.

     (use-package corfu
       ;; TAB-and-Go customizations
       :custom
       (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
       (corfu-preselect-first nil) ;; Disable candidate preselection

       ;; Use TAB for cycling, default is `corfu-complete'.
       :bind
       (:map corfu-map
             ("TAB" . corfu-next)
             ([tab] . corfu-next)
             ("S-TAB" . corfu-previous)
             ([backtab] . corfu-previous))

       :init
       (corfu-global-mode))


File: corfu.info,  Node: Key bindings,  Next: Complementary packages,  Prev: Installation and Configuration,  Up: Top

4 Key bindings
**************

Corfu uses a transient keymap ‘corfu-map’ which is active while the
popup is shown.  The keymap defines the following remappings and
bindings:

   • ‘beginning-of-buffer’ -> ‘corfu-first’
   • ‘end-of-buffer’ -> ‘corfu-last’
   • ‘scroll-down-command’ -> ‘corfu-scroll-down’
   • ‘scroll-up-command’ -> ‘corfu-scroll-up’
   • ‘next-line’, ‘down’, ‘M-n’ -> ‘corfu-next’
   • ‘previous-line’, ‘up’, ‘M-p’ -> ‘corfu-previous’
   • ‘completion-at-point’, ‘TAB’ -> ‘corfu-complete’
   • ‘RET’ -> ‘corfu-insert’
   • ‘M-g’ -> ‘corfu-show-location’
   • ‘M-h’ -> ‘corfu-show-documentation’
   • ‘C-g’ -> ‘corfu-quit’
   • ‘keyboard-escape-quit’ -> ‘corfu-reset’


File: corfu.info,  Node: Complementary packages,  Next: Caveats,  Prev: Key bindings,  Up: Top

5 Complementary packages
************************

Corfu works well together with all packages providing code completion
via the ‘completion-at-point-functions’.  Furthermore it supports
completion styles, including the advanced Orderless
(https://github.com/oantolin/orderless) completion style, where the
filtering expressions are separated by spaces (see
‘corfu-quit-at-boundary’).

   I collect additional Capf backends and ‘completion-in-region’
commands in my small Cape (https://github.com/minad/cape) package.  For
example the package provides a file name and a dabbrev completion
backend.

   Icons are supported by Corfu via an external package.  For example
the kind-icon (https://github.com/jdtsmith/kind-icon) package provides
beautifully styled SVG icons based on monochromatic icon sets like
material design.

   You may also want to look into my Vertico
(https://github.com/minad/vertico) package.  Vertico is the minibuffer
counterpart of Corfu.


File: corfu.info,  Node: Caveats,  Next: Contributions,  Prev: Complementary packages,  Up: Top

6 Caveats
*********

Corfu is robust in most scenarios.  There are a few known technical
caveats.

   • Corfu falls back to the default Completion buffer on non-graphical
     displays, since Corfu requires child frames.
   • No sorting by history, since ‘completion-at-point’ does not
     maintain a history (See branch ‘history’ for a possible solution).
   • There is currently no equivalent for ‘company-quickhelp’.
     Documentation and source can be opened manually in a separate
     buffer.
   • Company has the ability to merge/group the candidates of multiple
     backends in some scenarios.  This feature is implemented by the
     function ‘cape-super-capf’ of the Cape
     (https://github.com/minad/cape) package.


File: corfu.info,  Node: Contributions,  Prev: Caveats,  Up: Top

7 Contributions
***************

Since this package is part of GNU ELPA
(http://elpa.gnu.org/packages/corfu.html) contributions require a
copyright assignment to the FSF.



Tag Table:
Node: Top195
Node: Introduction597
Node: Features2215
Node: Installation and Configuration3619
Node: TAB-and-Go completion7339
Node: Key bindings8149
Node: Complementary packages9101
Node: Caveats10175
Node: Contributions11030

End Tag Table


Local Variables:
coding: utf-8
End:
